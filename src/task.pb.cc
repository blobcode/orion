// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace task {
PROTOBUF_CONSTEXPR TaskRequest::TaskRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.script_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.args_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskRequestDefaultTypeInternal() {}
  union {
    TaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskRequestDefaultTypeInternal _TaskRequest_default_instance_;
PROTOBUF_CONSTEXPR TaskResponse::TaskResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.worker_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskResponseDefaultTypeInternal() {}
  union {
    TaskResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskResponseDefaultTypeInternal _TaskResponse_default_instance_;
PROTOBUF_CONSTEXPR WorkerRegistration::WorkerRegistration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.worker_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkerRegistrationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkerRegistrationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkerRegistrationDefaultTypeInternal() {}
  union {
    WorkerRegistration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkerRegistrationDefaultTypeInternal _WorkerRegistration_default_instance_;
PROTOBUF_CONSTEXPR WorkerAcknowledgment::WorkerAcknowledgment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.worker_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkerAcknowledgmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkerAcknowledgmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkerAcknowledgmentDefaultTypeInternal() {}
  union {
    WorkerAcknowledgment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkerAcknowledgmentDefaultTypeInternal _WorkerAcknowledgment_default_instance_;
}  // namespace task
static ::_pb::Metadata file_level_metadata_task_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_task_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_task_2eproto = nullptr;

const uint32_t TableStruct_task_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::task::TaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::task::TaskRequest, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::task::TaskRequest, _impl_.script_),
  PROTOBUF_FIELD_OFFSET(::task::TaskRequest, _impl_.args_),
  PROTOBUF_FIELD_OFFSET(::task::TaskRequest, _impl_.client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::task::TaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::task::TaskResponse, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::task::TaskResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::task::TaskResponse, _impl_.worker_id_),
  PROTOBUF_FIELD_OFFSET(::task::TaskResponse, _impl_.client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::task::WorkerRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::task::WorkerRegistration, _impl_.worker_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::task::WorkerAcknowledgment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::task::WorkerAcknowledgment, _impl_.worker_id_),
  PROTOBUF_FIELD_OFFSET(::task::WorkerAcknowledgment, _impl_.status_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::task::TaskRequest)},
  { 10, -1, -1, sizeof(::task::TaskResponse)},
  { 20, -1, -1, sizeof(::task::WorkerRegistration)},
  { 27, -1, -1, sizeof(::task::WorkerAcknowledgment)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::task::_TaskRequest_default_instance_._instance,
  &::task::_TaskResponse_default_instance_._instance,
  &::task::_WorkerRegistration_default_instance_._instance,
  &::task::_WorkerAcknowledgment_default_instance_._instance,
};

const char descriptor_table_protodef_task_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntask.proto\022\004task\"O\n\013TaskRequest\022\017\n\007tas"
  "k_id\030\001 \001(\t\022\016\n\006script\030\002 \001(\t\022\014\n\004args\030\003 \001(\t"
  "\022\021\n\tclient_id\030\004 \001(\t\"U\n\014TaskResponse\022\017\n\007t"
  "ask_id\030\001 \001(\t\022\016\n\006result\030\002 \001(\t\022\021\n\tworker_i"
  "d\030\003 \001(\t\022\021\n\tclient_id\030\004 \001(\t\"\'\n\022WorkerRegi"
  "stration\022\021\n\tworker_id\030\001 \001(\t\"9\n\024WorkerAck"
  "nowledgment\022\021\n\tworker_id\030\001 \001(\t\022\016\n\006status"
  "\030\002 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_task_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_task_2eproto = {
    false, false, 294, descriptor_table_protodef_task_2eproto,
    "task.proto",
    &descriptor_table_task_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_task_2eproto::offsets,
    file_level_metadata_task_2eproto, file_level_enum_descriptors_task_2eproto,
    file_level_service_descriptors_task_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_task_2eproto_getter() {
  return &descriptor_table_task_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_task_2eproto(&descriptor_table_task_2eproto);
namespace task {

// ===================================================================

class TaskRequest::_Internal {
 public:
};

TaskRequest::TaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:task.TaskRequest)
}
TaskRequest::TaskRequest(const TaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.script_){}
    , decltype(_impl_.args_){}
    , decltype(_impl_.client_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.script_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.script_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_script().empty()) {
    _this->_impl_.script_.Set(from._internal_script(), 
      _this->GetArenaForAllocation());
  }
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_args().empty()) {
    _this->_impl_.args_.Set(from._internal_args(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:task.TaskRequest)
}

inline void TaskRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.script_){}
    , decltype(_impl_.args_){}
    , decltype(_impl_.client_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.script_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.script_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.args_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.args_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskRequest::~TaskRequest() {
  // @@protoc_insertion_point(destructor:task.TaskRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_id_.Destroy();
  _impl_.script_.Destroy();
  _impl_.args_.Destroy();
  _impl_.client_id_.Destroy();
}

void TaskRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:task.TaskRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_id_.ClearToEmpty();
  _impl_.script_.ClearToEmpty();
  _impl_.args_.ClearToEmpty();
  _impl_.client_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "task.TaskRequest.task_id"));
        } else
          goto handle_unusual;
        continue;
      // string script = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_script();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "task.TaskRequest.script"));
        } else
          goto handle_unusual;
        continue;
      // string args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "task.TaskRequest.args"));
        } else
          goto handle_unusual;
        continue;
      // string client_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "task.TaskRequest.client_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:task.TaskRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "task.TaskRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  // string script = 2;
  if (!this->_internal_script().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_script().data(), static_cast<int>(this->_internal_script().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "task.TaskRequest.script");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_script(), target);
  }

  // string args = 3;
  if (!this->_internal_args().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_args().data(), static_cast<int>(this->_internal_args().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "task.TaskRequest.args");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_args(), target);
  }

  // string client_id = 4;
  if (!this->_internal_client_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "task.TaskRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task.TaskRequest)
  return target;
}

size_t TaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:task.TaskRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 1;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // string script = 2;
  if (!this->_internal_script().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_script());
  }

  // string args = 3;
  if (!this->_internal_args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_args());
  }

  // string client_id = 4;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskRequest::GetClassData() const { return &_class_data_; }


void TaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskRequest*>(&to_msg);
  auto& from = static_cast<const TaskRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:task.TaskRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (!from._internal_script().empty()) {
    _this->_internal_set_script(from._internal_script());
  }
  if (!from._internal_args().empty()) {
    _this->_internal_set_args(from._internal_args());
  }
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskRequest::CopyFrom(const TaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:task.TaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRequest::IsInitialized() const {
  return true;
}

void TaskRequest::InternalSwap(TaskRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.script_, lhs_arena,
      &other->_impl_.script_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.args_, lhs_arena,
      &other->_impl_.args_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_id_, lhs_arena,
      &other->_impl_.client_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_task_2eproto_getter, &descriptor_table_task_2eproto_once,
      file_level_metadata_task_2eproto[0]);
}

// ===================================================================

class TaskResponse::_Internal {
 public:
};

TaskResponse::TaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:task.TaskResponse)
}
TaskResponse::TaskResponse(const TaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.worker_id_){}
    , decltype(_impl_.client_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), 
      _this->GetArenaForAllocation());
  }
  _impl_.worker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worker_id().empty()) {
    _this->_impl_.worker_id_.Set(from._internal_worker_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:task.TaskResponse)
}

inline void TaskResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.worker_id_){}
    , decltype(_impl_.client_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.worker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskResponse::~TaskResponse() {
  // @@protoc_insertion_point(destructor:task.TaskResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_id_.Destroy();
  _impl_.result_.Destroy();
  _impl_.worker_id_.Destroy();
  _impl_.client_id_.Destroy();
}

void TaskResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:task.TaskResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_id_.ClearToEmpty();
  _impl_.result_.ClearToEmpty();
  _impl_.worker_id_.ClearToEmpty();
  _impl_.client_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "task.TaskResponse.task_id"));
        } else
          goto handle_unusual;
        continue;
      // string result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "task.TaskResponse.result"));
        } else
          goto handle_unusual;
        continue;
      // string worker_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_worker_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "task.TaskResponse.worker_id"));
        } else
          goto handle_unusual;
        continue;
      // string client_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "task.TaskResponse.client_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:task.TaskResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "task.TaskResponse.task_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  // string result = 2;
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "task.TaskResponse.result");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result(), target);
  }

  // string worker_id = 3;
  if (!this->_internal_worker_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worker_id().data(), static_cast<int>(this->_internal_worker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "task.TaskResponse.worker_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_worker_id(), target);
  }

  // string client_id = 4;
  if (!this->_internal_client_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "task.TaskResponse.client_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task.TaskResponse)
  return target;
}

size_t TaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:task.TaskResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 1;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // string result = 2;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // string worker_id = 3;
  if (!this->_internal_worker_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worker_id());
  }

  // string client_id = 4;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskResponse::GetClassData() const { return &_class_data_; }


void TaskResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskResponse*>(&to_msg);
  auto& from = static_cast<const TaskResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:task.TaskResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  if (!from._internal_worker_id().empty()) {
    _this->_internal_set_worker_id(from._internal_worker_id());
  }
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskResponse::CopyFrom(const TaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:task.TaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskResponse::IsInitialized() const {
  return true;
}

void TaskResponse::InternalSwap(TaskResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_, lhs_arena,
      &other->_impl_.result_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.worker_id_, lhs_arena,
      &other->_impl_.worker_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_id_, lhs_arena,
      &other->_impl_.client_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_task_2eproto_getter, &descriptor_table_task_2eproto_once,
      file_level_metadata_task_2eproto[1]);
}

// ===================================================================

class WorkerRegistration::_Internal {
 public:
};

WorkerRegistration::WorkerRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:task.WorkerRegistration)
}
WorkerRegistration::WorkerRegistration(const WorkerRegistration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkerRegistration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.worker_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.worker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worker_id().empty()) {
    _this->_impl_.worker_id_.Set(from._internal_worker_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:task.WorkerRegistration)
}

inline void WorkerRegistration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.worker_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.worker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkerRegistration::~WorkerRegistration() {
  // @@protoc_insertion_point(destructor:task.WorkerRegistration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkerRegistration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.worker_id_.Destroy();
}

void WorkerRegistration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkerRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:task.WorkerRegistration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.worker_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerRegistration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string worker_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_worker_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "task.WorkerRegistration.worker_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkerRegistration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:task.WorkerRegistration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string worker_id = 1;
  if (!this->_internal_worker_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worker_id().data(), static_cast<int>(this->_internal_worker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "task.WorkerRegistration.worker_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_worker_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task.WorkerRegistration)
  return target;
}

size_t WorkerRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:task.WorkerRegistration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string worker_id = 1;
  if (!this->_internal_worker_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worker_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkerRegistration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkerRegistration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkerRegistration::GetClassData() const { return &_class_data_; }


void WorkerRegistration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkerRegistration*>(&to_msg);
  auto& from = static_cast<const WorkerRegistration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:task.WorkerRegistration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_worker_id().empty()) {
    _this->_internal_set_worker_id(from._internal_worker_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerRegistration::CopyFrom(const WorkerRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:task.WorkerRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerRegistration::IsInitialized() const {
  return true;
}

void WorkerRegistration::InternalSwap(WorkerRegistration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.worker_id_, lhs_arena,
      &other->_impl_.worker_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerRegistration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_task_2eproto_getter, &descriptor_table_task_2eproto_once,
      file_level_metadata_task_2eproto[2]);
}

// ===================================================================

class WorkerAcknowledgment::_Internal {
 public:
};

WorkerAcknowledgment::WorkerAcknowledgment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:task.WorkerAcknowledgment)
}
WorkerAcknowledgment::WorkerAcknowledgment(const WorkerAcknowledgment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkerAcknowledgment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.worker_id_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.worker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worker_id().empty()) {
    _this->_impl_.worker_id_.Set(from._internal_worker_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:task.WorkerAcknowledgment)
}

inline void WorkerAcknowledgment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.worker_id_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.worker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkerAcknowledgment::~WorkerAcknowledgment() {
  // @@protoc_insertion_point(destructor:task.WorkerAcknowledgment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkerAcknowledgment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.worker_id_.Destroy();
  _impl_.status_.Destroy();
}

void WorkerAcknowledgment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkerAcknowledgment::Clear() {
// @@protoc_insertion_point(message_clear_start:task.WorkerAcknowledgment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.worker_id_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerAcknowledgment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string worker_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_worker_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "task.WorkerAcknowledgment.worker_id"));
        } else
          goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "task.WorkerAcknowledgment.status"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkerAcknowledgment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:task.WorkerAcknowledgment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string worker_id = 1;
  if (!this->_internal_worker_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worker_id().data(), static_cast<int>(this->_internal_worker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "task.WorkerAcknowledgment.worker_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_worker_id(), target);
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "task.WorkerAcknowledgment.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task.WorkerAcknowledgment)
  return target;
}

size_t WorkerAcknowledgment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:task.WorkerAcknowledgment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string worker_id = 1;
  if (!this->_internal_worker_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worker_id());
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkerAcknowledgment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkerAcknowledgment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkerAcknowledgment::GetClassData() const { return &_class_data_; }


void WorkerAcknowledgment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkerAcknowledgment*>(&to_msg);
  auto& from = static_cast<const WorkerAcknowledgment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:task.WorkerAcknowledgment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_worker_id().empty()) {
    _this->_internal_set_worker_id(from._internal_worker_id());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerAcknowledgment::CopyFrom(const WorkerAcknowledgment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:task.WorkerAcknowledgment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerAcknowledgment::IsInitialized() const {
  return true;
}

void WorkerAcknowledgment::InternalSwap(WorkerAcknowledgment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.worker_id_, lhs_arena,
      &other->_impl_.worker_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerAcknowledgment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_task_2eproto_getter, &descriptor_table_task_2eproto_once,
      file_level_metadata_task_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace task
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::task::TaskRequest*
Arena::CreateMaybeMessage< ::task::TaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::task::TaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::task::TaskResponse*
Arena::CreateMaybeMessage< ::task::TaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::task::TaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::task::WorkerRegistration*
Arena::CreateMaybeMessage< ::task::WorkerRegistration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::task::WorkerRegistration >(arena);
}
template<> PROTOBUF_NOINLINE ::task::WorkerAcknowledgment*
Arena::CreateMaybeMessage< ::task::WorkerAcknowledgment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::task::WorkerAcknowledgment >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
